# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # config.vm.box = "generic/ubuntu1804"
  config.vm.box = "generic/ubuntu2004"

  # making a modification to load a Vagrantfile.local if it exists
  #   this will let me add local modifications if I need to outside of this repo
  # https://stackoverflow.com/a/53490858
  local_mods = './Vagrantfile.local'
  # https://stackoverflow.com/a/35769926
  eval File.read(local_mods) if File.exists?(local_mods)

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.131.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder './mine', '/vagrant/src/mine', type: 'nfs'
  config.vm.synced_folder './work', '/vagrant/src/work', type: 'nfs'
  # config.vm.synced_folder './others', '/code/others', type: 'nfs'
  # config.vm.synced_folder './community', '/code/community', type: 'nfs'

  config.vm.provider "libvirt" do |libvirt|
    libvirt.cpus = 4
    libvirt.memory = 8192
    # libvirt.machine_virtual_size = 50
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  config.ssh.forward_agent = true
  config.ssh.forward_x11 = true

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision 'fix-dns', type: "shell", run: 'never' do |script|
    script.inline = <<-SHELL
      sudo sed -i -e '/nameservers:/d' -e '/addresses:/d' /etc/netplan/01-netcfg.yaml
      sudo netplan generate && sudo netplan apply
      sudo sed -i 's/^[[:alpha:]]/#&/' /etc/systemd/resolved.conf
      sudo systemctl restart systemd-resolved.service
    SHELL
  end

  config.vm.provision 'vm-deployment', type: 'ansible' do |ansible|
    ansible.playbook = 'hypervisor_setup.yml'
    ansible.galaxy_role_file = "ansible-requirements.yml"
    ansible.galaxy_command = "ansible-galaxy collection install -r %{role_file} --force"
    ansible.extra_vars = {
      ansible_python_interpreter: '/usr/bin/python3'
    }
  end
  # config.vm.provision "shell", inline: <<-SHELL
  #   set -exuo pipefail
  #   # adding for personal like of vi mode
  #   sudo -u vagrant bash -xc "echo 'set editing-mode vi' >> ~vagrant/.inputrc"
  #   sudo -u vagrant bash -xc "echo 'pushd /vagrant' >> ~vagrant/.bashrc"
  # SHELL
 #
  #   # exporting for updating
  #   export DEBIAN_FRONTEND=noninteractive
  #
  #   # updating and installing
  #   apt-get update &&
  #     apt-get -y upgrade &&
  #     apt-get -y dist-upgrade &&
  #     apt-get -y autoremove &&
  #     apt install -fy \
  #       screen \
  #       virtualbox \
  #       linux-headers-generic \
  #       vagrant
  #
  #   # installing docker
  #   curl -fsSL https://get.docker.com | bash
  #   usermod -aG docker vagrant
  #
  #   # install vagrant and vbox
  #   # export CIRCLECI='true'
  #   # curl -fsSL 'https://raw.githubusercontent.com/elreydetoda/packer-kali_linux/master/ci/bootstrap.sh' | bash -
  #
end
